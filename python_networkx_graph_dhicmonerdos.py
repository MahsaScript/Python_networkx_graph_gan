# -*- coding: utf-8 -*-
"""Python_NetworkX graph_DHICMonErdos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f_lPpi9zCQ9bAV7IyK3jUnKI4P-FiMuC
"""

def select_seed_nodes(G, k, M, p):
    S = set()
    V = set(G.nodes())  # Assuming G is a NetworkX graph or a similar graph representation
    ddv = {v: G.degree(v) for v in V}

    for i in range(k):
        u = max((v for v in V - S), key=lambda v: ddv[v])
        S.add(u)

        for v in G.neighbors(u):
            if v not in S:
                ddv[v] = G.degree(v) - 1 - (G.degree(u) - 1) * p
                10 - 1 - (4*0.2)
    return S

import networkx as nx

G = nx.erdos_renyi_graph(10000,0.5)

import matplotlib.pyplot as plt
#nx.draw(G, with_labels=True)

select_seed_nodes(G, 15,0, 0.5)

Gk = nx.karate_club_graph()

s = select_seed_nodes(Gk, 10,0, 0.5)

s

import numpy as np

def IC(g,S,p=0.5,mc=1000):
    """
    Input:  graph object, set of seed nodes, propagation probability
            and the number of Monte-Carlo simulations
    Output: average number of nodes influenced by the seed nodes
    """

    # Loop over the Monte-Carlo Simulations
    spread = []
    activated_nodes = []
    for i in range(mc):

        # Simulate propagation process
        new_active, A = S[:], S[:]
        while new_active:

            # For each newly active node, find its neighbors that become activated
            new_ones = []
            for node in new_active:

                # Determine neighbors that become infected
                np.random.seed(i)
                success = np.random.uniform(0,1,len(list(g.neighbors(node)))) < p
                new_ones += list(np.extract(success, list(g.neighbors(node))))

            new_active = list(set(new_ones) - set(A))

            # Add newly activated nodes to the set of activated nodes
            A += new_active

        spread.append(len(A))
        activated_nodes = A

    return A, (np.mean(spread))

G = nx.erdos_renyi_graph(100,0.5)

spread, mean_spread = IC(Gk, list(s), p=0.5)

# Create a list of colors for each node based on whether it's in the highlight set
node_colors = ['red' if node in spread else 'blue' for node in Gk.nodes()]

pos = nx.spring_layout(Gk)  # Layout the graph

nx.draw(Gk, pos, with_labels=True, node_color=node_colors, node_size=500)



Gk.number_of_nodes()

G = nx.erdos_renyi_graph(10000,0.2)
# pos = nx.spring_layout(G)  # Layout the graph

# nx.draw(G, pos, node_size=10)

G.number_of_edges(), G.number_of_nodes()

nx.draw(G, pos, node_size=10)

s = select_seed_nodes(G, 1000,0, 0.5)

spread, mean_spread = IC(G, list(s), p=0.5, mc=100)

# Create a list of colors for each node based on whether it's in the highlight set
node_colors = ['red' if node in spread else 'blue' for node in G.nodes()]

pos = nx.spring_layout(G)  # Layout the graph

nx.draw(G, pos, node_color=node_colors, node_size=10)

mean_spread